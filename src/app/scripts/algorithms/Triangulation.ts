import { Path } from 'app/model/paths';
import {
  bisect,
  bisector,
  feature,
  mergeArcs,
  neighbors,
  polygonArea,
  shuffle,
} from 'app/scripts/topojson';
import { Geometry, Point, Polygon, Triangle } from 'app/scripts/topojson/types';
import * as earcut from 'earcut';
import * as _ from 'lodash';

interface Topology {
  readonly type: string;
  readonly objects: {
    readonly triangles: {
      readonly type: string;
      readonly geometries: Array<Geometry>; // TODO: make this a readonly array
    };
  };
  readonly arcs: ReadonlyArray<[Point, Point]>;
}

export function triangulate(path: Path) {
  // TODO: make sure this works for paths with more than one subpath
  const points = path.getCommands().map(cmd => [cmd.getEnd().x, cmd.getEnd().y] as Point);
  const cuts = earcut(_.flatten(points));

  const triangles: Triangle[] = [];
  for (let i = 0; i < cuts.length; i += 3) {
    // Save each triangle as segments [a, b], [b, c], [c, a].
    triangles.push([[cuts[i], cuts[i + 1]], [cuts[i + 1], cuts[i + 2]], [cuts[i + 2], cuts[i]]]);
  }

  const topology = createTopology(triangles, points);
  const pieces = collapse(topology, 8);
  console.info(pieces);
}

function createTopology(triangles: ReadonlyArray<Triangle>, points: ReadonlyArray<Point>) {
  var arcIndices = {},
    topology = {
      type: 'Topology',
      objects: {
        triangles: {
          type: 'GeometryCollection',
          geometries: [],
        },
      },
      arcs: [],
    };

  triangles.forEach(function(triangle) {
    var geometry = [];

    triangle.forEach(function(arc, i) {
      var slug = arc[0] < arc[1] ? arc.join(',') : arc[1] + ',' + arc[0],
        coordinates = arc.map(function(pointIndex) {
          return points[pointIndex];
        });

      if (slug in arcIndices) {
        geometry.push(~arcIndices[slug]);
      } else {
        geometry.push((arcIndices[slug] = topology.arcs.length));
        topology.arcs.push(coordinates);
      }
    });

    topology.objects.triangles.geometries.push({
      type: 'Polygon',
      area: Math.abs(
        polygonArea(
          triangle.map(function(d) {
            return points[d[0]];
          }),
        ),
      ),
      arcs: [geometry],
    });
  });

  // Sort smallest first
  topology.objects.triangles.geometries.sort(function(a, b) {
    return a.area - b.area;
  });

  return topology as Topology;
}

// Merge polygons into neighbors one at a time until only numPieces remain.
function collapse(topology: Topology, numPieces: number) {
  const geometries = topology.objects.triangles.geometries;
  const bisectorLeft = bisector(ascendingComparator((d: { area: number }) => d.area)).left;

  function mergeSmallestFeature() {
    const smallest = geometries[0];
    const neighborIndex = neighbors(geometries)[0][0];
    const neighbor = geometries[neighborIndex as number];
    // console.info(smallest, neighbors(geometries), neighborIndex);
    // TODO: remove cast to any
    const merged: any = mergeArcs(topology, [smallest, neighbor]);
    let features;

    // MultiPolygon -> Polygon
    merged.area = smallest.area + neighbor.area;
    merged.type = 'Polygon';
    merged.arcs = merged.arcs[0];

    // Delete smallest and its chosen neighbor
    geometries.splice(neighborIndex as number, 1);
    geometries.shift();

    // Add new merged shape in sorted order
    geometries.splice(bisectorLeft(geometries, merged.area), 0, merged);

    if (geometries.length > numPieces) {
      return mergeSmallestFeature();
    }
    // Merged down to numPieces
    // TODO: remove this cast to any
    features = (feature(topology, topology.objects.triangles) as any).features;
    return features.map(f => f.geometry.coordinates[0]);
  }

  if (geometries.length > numPieces) {
    // TODO: return something here (and in the else case)
    return mergeSmallestFeature();
  }
  // TODO: return something here (and in the else case)
  return undefined;
}

function ascendingComparator<D>(fn: (d: D) => number) {
  return (d: D, x: number) => {
    const a = fn(d);
    const b = x;
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  };
}

const texas = new Path(
  `M385.504 20.032l12.52.3 13.452.225 12.84.15 24.413.006 19.166-.244 17.324-.4.592 22.03.31 11.44.677 24.94.61 22.444
   1.59-.805 2.293 1.117 4.86 5.313 2.105 1.734 3.29.037.996-1.876 1.815.1 4.19 1.473.678-3.523 2.002 2.01 2.06.16-.264.967
   2.2 1.67-.104 1.303.987 3.937 2.415.423 2.265-.018 3.647-.68 2.322 1.747 1.973.166 2.303.957 2.68.023 1.57-1.408 2.34.53
   3.374 3.48 2.98-1.945-.056-1.007 1.128-1.28 2.284.825 2.37-.138 2.274.722 1.485-1.794 1.222 1.283-.903 2.19 1.43 2.843
   1.54.307 2.407-.663.913.557-.16 3.258-.912.754 3.893 1.776 2.435-1.28 1.334-2.534 1.08-.184 1.41-2.24.904-.216 2.33
   1.348.462 2.143 1.11.212 1.935-1.09 1.55.635.01 2.497 1.364.938 1.823-.134 1.09-1.835 2.943-.392.244-1.697 2.097-.055.855
   2.494-1.242 1.69.583 1.75 1.486 1.444 2.05-.382-.15-3.18 1.513-.675 2-3.395.198-1.82 1.655-1.133.705.445.517 2.116 1.175
   1.74 1.128-1.016 1.344.138 1.316 1.78 1.645-.437.742-.856.376-2.683 2.906.45-.884 2.38 1.843.786 1.4-.294 1.307 2.023
   2.463-.48 2.322 2.37.517 1.17 1.39-.443.706-3.225 2.547.76 1.373-.658.76-3.372 2.22-.626 1.297.307 3.506-1.324.63-1.15
   3.516 1.77.403-1.108 1.654.45.273-2.02 2.387-.1.724-.952 1.336-.092.884-1.563 1.645.59.864 1.747 3.242.267 2.783-.32
   3.807-2.472-.216-.883 1.062-1.256 2.2.85 4.136 2.613 1.795-.06 1.287.85 2.152 2.246 1.955 1.315 3.14.248 1.447 1.31
   1.87.112 1.702.667 1.598-.267 1.23 1.513 2.08-.023.6-.814 1.27.714 2.603 2.686 1.213-.754 1.56.18.48-1.34 3.158.222.517-1.27
   1.457 1.063 2.22-.75 1.503.8 3.083 22.477 1.39 10.263 2.548 18.533 2.012 14.555.93.313 2.144 2.72 2.613.768.16.795 3.497
   3.943-.386 1.07 1.833 1.846-.883 1.918.47.883-.592 1.84.93 1.66 1.504 1.197 1.55-.234.96.754-.855 1.753 2.275 1.053 1.373
   2.95-.404 2.45 3.026 1.822.01 1.15 1.494 2.737 1.345-1.11.807 3.024-.742 1.057 1.457.685.31 1.458-1.194 2.31 1.683
   2.668-.648 2.59.395 1.39-1.89 7.22-1.692 1.887.46 2-1.268.47-.65 2.157 2.163 4.21-1.917 2.405.122 2.673 2.726 2.75-.328
   2.31 1.523 3.036-.912 2.01.376 1.72-.537 1.37-1.673 1.975-2.407.28-.282 1.67-1.634 3.994-.15 2.682.394 1.274 2.482 2.006.8
   1.26-.49.856-1.607-.078-4.606.552-.847.216-2.576 1.38-2.98 2.258-4.314 2.337-11.478 7.153-1.27 1.205-1.682 2.627-.733.46-.92
   -.055.027-1.04 2.726-3.45.92-.653 1.928-.93.988-1.356.734-.492 1.936-.143 1.1-.593.037-1.436-.827.87-2.105-.87-1.56 1.183
   -3.357 1.044-2.218.935-.338-.833 1.353-3.188.273-1.775.14-2.067-.714-2.364-.752-1.027-.987-.13-1.85.7-.51-.395-.676.704.104.805
   -.676 1.518-.357 1.582-.405.823-1.607.667-.517-.446-.386-.974-1.137-.52-1.965-.47-.855-1.15-.705.03-.254 1.668 2.2.603.987.704
   -.79.778-.188.7.31.79 1.08.755-.11.538-.894 1.248-.16 1.21 1.683 1.062 3.018.414-.488.99-.517-.14-1.053.595.743.698.366
   1.297.988-.083 1.176.764 2.782.855-.46.393-1.476-.456-.677.3-.254 1.885-.35.893-.544.427-.668-.423-1.39 1.7-2.66 3.93-1.806
   1.536-.423-.79-1.524-.14.63 1.086-.235 1.03.687 2.76.113 1.362-.225.603-2.548 2.553-1.034.74-1.814 2.614-2.304 2.415-1.504.54
   -2.435 2.196-4.145 3.427-1.59.984-1.663.612-1.75.312-1.813.092-1.438.308-5.06 2.502.302.525-.01 2.243.46-.01 5.397-3.89
   1.437-.74 1.382-.286-4.278 3.57-2.416 1.545-3.93 1.37-2.2 2.15-2.17.993-2.378 1.82-.31-.592 1.22-1.104 5.34-3.474 1.213-.617
   -.252-1.404-.78-.33-.762.21-1.41 1.03-1.28.498-2.208 1.325-1.804.726-.752-.64.648-.428 1.777-.38.103-.917-1.56.54-.818-.042
   -.085-.823.762-1.564-.17-.593-2.53.51-.78.48-.92 1.384-1.41.843-.48-.792-1.494-1.42.385-1.214-.9-1.196-.697.68-.818-1.09
   -.33.318.94 1.738.734 1.836-.16 1.035 1.917.584-2.134 1.616-.686-.023.16-.893-.414-.81-1.372 1.17-.63-1.39-.864.276-1.193
   -.115-.414-.358-.48-1.858-1.006-.98-1.072.018-.47.34-.865-.56.376 1.885 1.645 2.07.32.746-.066 1.88 1.043-.095 2.54
   1.104.59.5.64 1.123-1.965 1.22.63.763 1.034-.842 1.147-.446 1.543.405 1.23.9.217 1.06-2.688 1.793-.743.267-5.932 4.025-.752
   -.492-.62.262-.743-1.04-.226-1.637-.564-.713-.94-.147-.282-1.072-.854-.514-1.166-1.33-.61.59 1.4 1.25.526 1.16-.282.487-2.21
   -1.08-.582.643.865 1.173 1.297 1.306.658 1.053-.583 2.432.902 1.62-.348.616-1.344 1.012-1.824 2.802-.583.492-1.898.814.32
   -1.68.79-1.53-.64-.797.498-1.613-.583-.608-1.297 2.263.564.432.02 1.4-.81 1.89-.432.238-1.457-.354.29-2.494-.553-.603
   -.555 1.012-1.316.994-1.495.776-1.166-.446-1.044.005-.423.91.837.576-1.495 1.8-.678 1.053.386.41 1.635.293 1.674 1.624.752
   -2.516 1.86-.966.8-1.458.6.82-.112 1.765.178.897-1.56 2.19-1.24 2.783-2.774 4.784-.827.744-1.335-1.803-1.307-.602-.93.198
   -1.56.832-1.514-.437-3.357.264-.272.588-1.09-.174-.254-.474-1.128.267.724 1.045.762.566.93.093 1.27-.405 1.343-.032.527.27
   -.235 1.308 1.042 2.028.677.56 3.684 1.243.272 1.288-.92 1.77-.114 1.524-1.165 2.788-.527 2.042-.16 1.385-.516.722-1.298
   4.825-.037 1.02-.424.364-2.53 1.28-.788 1.048-.564.22-.81-.478 1.41-.897.67-1.086.694-.27-.197-.75-.864-.405.122-1.752
   -.752.41-1.335 1.333.35.603-1.336 1.034-.667-.428-.658 1.145.13.595-1.174.285-.386-1.08-3.563-4.45-1.09-.938-1.325-.763.235
   1.075 1.466 1.288-.085.952 1.57 1.362.8 1.587.827.59-1.25 1.232-.978-.01-1.053-.368-.367.86 1.87.405 2.257-.473.696.285.582.97
   1.28-.018 1.587.258h1.56l3.14-2.07.6.35-.234 1.13-.47.226.197 2.136-.488.648.648 1.882-.733.984-1.24.386.732 1.4-.432.514.583
   1.11.066.762-.528.465-2.256.33-.46.742.263 1.954.29.79.912 1.137 1.673.622.583.552-.414.916-1.945-1.564-.453-.166-.376 1.34.03
   1.54.338.556 1.71.23.537.456.64 1.403.43 1.978 1.204 2.86.657 2.99 1.147 2.977-.395 1.182-1.42.764 1.438.373-.178 1.12.018 1.9
   1.288.134.63 1.642 1.457.175-.254 1.335 1.07-.543.527.525-.573.676-.085 1.96.375.418.93-.33.64.727-.47 1.1.996 1.816-.083
   2.37.29 1.223 1.505.93 1.664-.02 1.034.235-.33 1.15-1.023-.082-.395 1.96.29 1.38.857.617 1.352-1.08.62-.852.226-2.278.96-.27.46
   1.227.498 3.588-2.942.534-2.736.75-1.918 1.752-1.964.704.742 1.205-.46 1.845-2.98-.17-1.26-1.753-2.077.267-.535-1.555-2.21
   -.65-1.85-2.263-1.984-1.692-2.434.473-2.68-.308-.666-1.173-1.86.483-1.252-.524-3.58.86-.922-.575-2.05 1.23-2.79-.976-2.812.06
   -1.09.73-2.134-.638-3.3-2.13-.44-1.78-2.22.29-2.416-1.758-.92-1.19-1.655.882-3.31-1.94-3.422 1.084-.648-1.108-2.303-1.688-.79
   -1.394-1.128.267-1.9-1.996-3.064.962-.292-.805-2.246-.156-.81-1.076-1.484.487-1.137-.938-1.824.865-1.25-1.307.686-2.162-1.618
   -2.373-1.598-.42-.64-3.863-.977-1.578-.498-3.152-1.317-.915-.178-1.94-1.185-2.476-2.528-1.592-.423-1.936-2.126-.898.395-1.37
   -1.637-1.93-1.26-.215-.28-1.992.657-.56-.348-3.33.498-1.243-.742-3.243-2.275-.99-.433-3.018.546-3.372-.358-1.725.593-1.26-2.02
   -.828.592-3.027-1.316-1.84-2.538-1.54-1.4.74-1.26-1.468-2.125-.207-2.077-2.93-1.25-.396-.508-1.45-1.194.285-1.213-1.173-.43-2.45
   -.96-1.138.404-1.094-1.88-2.43.235-1.228-2.332-.47-1.26-3.292-1.38-.792-1.42-2.764-5.01-2-.537-1.855-1.362-.2-1.494-1.95.197
   -1.476-2.49-3.75.49-1.305-1.29-1.993 1.28-1.164-2.078-.575-.996-1.684.48-1.504-1.966-1.076-.6-1.385-1.524-.907-.348-3.524
   -1.222-1.78-.376-1.97-1.203-.44-1.062-2.987-1.138-.01-.733-4.34-1.11-4.477-2.462-1.675-2.49-4.86-3.056-1.395-.348-1.196-2.5
   -1.75-2.078-.74-1.278-1.83-.94-2.328-3.553-.79-.866-1.666-3.375-.97.77
   -1.257-1.43-1.14-1.305.256.44-2.47-.544-.81-1.898.29-.47-2.18-1.55-1.983-1.28-.18-.272-1.655-1.71.984-1.495.18.16-1.592-1.26
   -.046-3.046 1.95-.62-.73-1.89.358-2.717-1.187-6.636-.313-.997-.883-2.604 1.273-2.594-.354
   -1.645-.976-1.1-1.528-1.27.36-2.98-1.684-1.606.345-2.49 4.563-1.128-.543-3.046.405-1.363.947-.912
   -.59-2.856.99-1.203-.345-.695 2.83-1.608 1.508-.263 1.945-1.11.13-.422 2.258-1.175.883v1.292l-1.043 2.714.225 1.587-.81 1.725
   -1.26.096-1.22 4.104 1.475 1.738-3.3 1.955-1.08-.394-2.256 3.75-.782-.01-1.85 1.734.036 1.504-2.265 2.41-1.928-.76-1.833.245
   -.575-.7-2.82-1.196-1.87-.13-2.397-2.055-2.802-3.295-1.212-.864-2.99-.252-2.68-1.265-1.982-1.666-.968-2.07-5.462-1.532
   -1.795-.156-1.842-.8-2.332-1.63-.893-1.265-2.33-1.122-1.542-2.466.15-1.403-3.29-2.07-1.608.092-2.096-1.716-.122-.703-4.268-3.202
   -1.062-1.955-.066-2.636-4.38-8.013-.103-2.497-.743-3.51 1.1-5.644-.837-2.632-1.71-1.817.046-1.062-1.824-1.573.112-1.284-1.757
   -1.337-.263-4.62-.742-3.352-1.232-1.342
   -1.39-.543-.405-2.35-.752-1.082-2.05-.147-1.88-2.608-3.61-3.004-1.23.216-3.215-2.038-1.738-.694-.367-1.56-5.574-4.853-.817-3.008
   -2.18-2.742-2.153-1.044-1.128-1.324-1.203-.28-.63-1.528-2.492-3.988-2.22-1.22-.628-2.308-1.88
   -1.394-2.51-.42-2.003-1.365-3.017-2.723-.714-2.525-1.213-1.127-.76-3.032-2.295-4.67-2.453-1.627-1.495.537-1.25-1.605-1.683-1.34
   -1.918-2.607v-1.693l1.09-.538-.762-2.69.846-.797 18.932 1.6 11.515.985 19.704 1.513 17.945 1.14 17.06.967 20.82.952 24.01.824.61
   -21.538.61-21.427.856-18.565 1.1-24.114.433-15.746.77-26.215.507-17.54.3-10.226.584-20.374.367-14.283 1.307.032z`,
);

triangulate(texas);
